// Servi√ßo Google Places API - Usando Web Components (N√£o requisi√ß√µes diretas)
// Este servi√ßo foi atualizado para trabalhar com GoogleMapsPlacePicker

import { GOOGLE_MAPS_API_KEY, isGoogleMapsConfigured, SEARCH_CONFIG, DEFAULT_REGION } from '@/config/maps';

export interface GooglePlacePrediction {
  place_id: string;
  description: string;
  structured_formatting: {
    main_text: string;
    secondary_text: string;
  };
  types: string[];
  terms: Array<{
    offset: number;
    value: string;
  }>;
}

export interface GooglePlaceDetails {
  place_id: string;
  formatted_address: string;
  geometry: {
    location: {
      lat: number;
      lng: number;
    };
  };
  address_components: Array<{
    long_name: string;
    short_name: string;
    types: string[];
  }>;
  name: string;
  types: string[];
}

export interface AddressSuggestion {
  place_id: string;
  description: string;
  structured_formatting: {
    main_text: string;
    secondary_text: string;
  };
  geometry?: {
    location: {
      lat: number;
      lng: number;
    };
  };
  types?: string[];
  source: 'google' | 'fallback';
}

/**
 * ‚ö†Ô∏è IMPORTANTE: Este servi√ßo N√ÉO faz requisi√ß√µes diretas ao Google Places
 * 
 * As requisi√ß√µes diretas s√£o bloqueadas pelo navegador (CORS).
 * Use o componente GoogleMapsPlacePicker que usa Web Components oficiais.
 * 
 * Este servi√ßo existe apenas para compatibilidade e fallback.
 */
export const searchPlaces = async (query: string): Promise<AddressSuggestion[]> => {
  console.warn('‚ö†Ô∏è [GooglePlacesService] Tentativa de busca direta bloqueada');
  console.warn('‚ö†Ô∏è Use GoogleMapsPlacePicker em vez de requisi√ß√µes diretas');
  
  if (!query || query.length < SEARCH_CONFIG.minQueryLength) {
    return [];
  }

  // Verificar se Google Maps est√° configurado
  if (!isGoogleMapsConfigured()) {
    console.warn('Google Maps API n√£o configurada.');
    return [];
  }

  // N√ÉO fazer requisi√ß√µes diretas - s√£o bloqueadas por CORS
  console.log('üö´ Requisi√ß√µes diretas para Google Places s√£o bloqueadas pelo navegador');
  console.log('‚úÖ Use o componente GoogleMapsPlacePicker para autocomplete');
  
  return [];
};

/**
 * Teste de conex√£o sem fazer requisi√ß√µes diretas
 * DESABILITADO para evitar conflitos com GoogleMapsPlacePicker
 */
export const testGooglePlacesConnection = async (): Promise<boolean> => {
  if (!isGoogleMapsConfigured()) {
    console.log('‚ùå Google Maps API n√£o configurada');
    return false;
  }
  
  console.log('‚úÖ Google Maps API configurada');
  
  // ‚ö†Ô∏è DESABILITADO: Teste de carregamento pode causar conflitos
  console.log('‚ÑπÔ∏è Teste de carregamento desabilitado para evitar conflitos');
  console.log('‚úÖ Use GoogleMapsPlacePicker para teste real');
  return true;
  
  /*
  // Testar carregamento da API JavaScript
  try {
    const testScript = document.createElement('script');
    testScript.src = `https://maps.googleapis.com/maps/api/js?key=${GOOGLE_MAPS_API_KEY}&libraries=places,marker&v=weekly&callback=__test_callback__`;
    
    return new Promise((resolve) => {
      const timeout = setTimeout(() => {
        console.log('‚è∞ Timeout do teste de conex√£o');
        resolve(false);
      }, 10000);
      
      (window as any).__test_callback__ = () => {
        clearTimeout(timeout);
        console.log('‚úÖ Google Maps JavaScript API carregada com sucesso');
        delete (window as any).__test_callback__;
        testScript.remove();
        resolve(true);
      };
      
      testScript.onerror = () => {
        clearTimeout(timeout);
        console.log('‚ùå Erro ao carregar Google Maps JavaScript API');
        delete (window as any).__test_callback__;
        testScript.remove();
        resolve(false);
      };
      
      document.head.appendChild(testScript);
    });
  } catch (error) {
    console.error('‚ùå Erro no teste de conex√£o:', error);
    return false;
  }
  */
};

/**
 * Obt√©m detalhes de um lugar (n√£o implementado - use Web Components)
 */
export const getPlaceDetails = async (placeId: string): Promise<GooglePlaceDetails | null> => {
  console.warn('‚ö†Ô∏è getPlaceDetails: Use Web Components em vez de requisi√ß√µes diretas');
  return null;
};

/**
 * Limpa caches (n√£o necess√°rio para Web Components)
 */
export const clearPlacesCache = (): void => {
  console.log('üìã Cache limpo (Web Components gerenciam cache automaticamente)');
};

export default {
  searchPlaces,
  getPlaceDetails,
  testGooglePlacesConnection,
  clearPlacesCache
};