import { searchAddresses, getCoordinatesFromAddress as getCoords } from '@/services/geocodingService';
import { isGoogleMapsConfigured } from '@/config/maps';
import { findFixedPrice, isDailyRequest, DAILY_RATES, identifyLocation, KNOWN_LOCATIONS } from '@/data/fixedPricing';
import { findPriceByCep, identifyRegionByCep, normalizeCep } from '@/data/cepPricing';
import { getRegionalPrice, RegionalPrices } from '@/data/regionalPricing';
import { isValidViracoposRoute, getViracoposPriceByVehicleType } from './cepValidation';
import { saoPauloAddresses } from '@/data/saoPauloAddresses';

// Cache para coordenadas de endere√ßos selecionados
const selectedAddressCoordinatesCache = new Map<string, { lat: number; lng: number }>();

// Cache para resultados da Distance Matrix API
const distanceMatrixCache = new Map<string, { distance: number; duration: number }>();

// Fun√ß√£o para armazenar coordenadas de endere√ßos selecionados
export const cacheSelectedAddressCoordinates = (address: string, coords: { lat: number; lng: number }) => {
  const key = address.toLowerCase().trim();
  selectedAddressCoordinatesCache.set(key, coords);
  console.log(`üìç Coordenadas armazenadas para "${address}":`, coords);
};

// Fun√ß√£o para calcular dist√¢ncia entre duas coordenadas usando a f√≥rmula de Haversine
export const calculateDistance = (lat1: number, lng1: number, lat2: number, lng2: number): number => {
  const R = 6371; // Raio da Terra em km
  const dLat = toRad(lat2 - lat1);
  const dLng = toRad(lng2 - lng1);
  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
            Math.sin(dLng / 2) * Math.sin(dLng / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
};

const toRad = (value: number): number => {
  return value * Math.PI / 180;
};

// Fun√ß√£o para obter dist√¢ncia e tempo usando Google Maps APIs
export const getGoogleMapsDistanceAndTime = async (
  origin: string,
  destination: string
): Promise<{ distance: number; duration: number } | null> => {
  if (!isGoogleMapsConfigured()) {
    console.warn('‚ö†Ô∏è Google Maps n√£o est√° configurado');
    return null;
  }

  const cacheKey = `${origin.toLowerCase().trim()}_${destination.toLowerCase().trim()}`;
  
  // Verificar cache primeiro
  if (distanceMatrixCache.has(cacheKey)) {
    const cached = distanceMatrixCache.get(cacheKey)!;
    console.log(`üéØ Cache hit para dist√¢ncia: ${cached.distance.toFixed(1)}km, ${cached.duration}min`);
    return cached;
  }

  try {
    // Tentar Routes API primeiro (mais precisa)
    const routesResult = await getDistanceUsingRoutesAPI(origin, destination, cacheKey);
    if (routesResult) {
      return routesResult;
    }

    // Fallback para Distance Matrix API
    const matrixResult = await getDistanceUsingDistanceMatrix(origin, destination, cacheKey);
    if (matrixResult) {
      return matrixResult;
    }

    console.warn('‚ö†Ô∏è Ambas as APIs do Google Maps falharam');
    return null;
  } catch (error) {
    console.error('‚ùå Erro ao obter dados do Google Maps:', error);
    return null;
  }
};

// Fun√ß√£o para usar Routes API
const getDistanceUsingRoutesAPI = async (
  origin: string,
  destination: string,
  cacheKey: string
): Promise<{ distance: number; duration: number } | null> => {
  try {
    const response = await fetch('/api/google-routes', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        origin,
        destination,
      }),
    });

    if (!response.ok) {
      console.warn(`‚ö†Ô∏è Routes API falhou: ${response.status}`);
      return null;
    }

    const data = await response.json();
    
    if (data.error) {
      console.warn('‚ö†Ô∏è Routes API retornou erro:', data.error);
      return null;
    }

    if (data.distance && data.duration) {
      const result = {
        distance: data.distance,
        duration: data.duration
      };
      
      // Armazenar no cache
      distanceMatrixCache.set(cacheKey, result);
      console.log(`üó∫Ô∏è Routes API: ${result.distance.toFixed(1)}km, ${result.duration}min`);
      
      return result;
    }

    return null;
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro na Routes API:', error);
    return null;
  }
};

// Fun√ß√£o para usar Distance Matrix API
const getDistanceUsingDistanceMatrix = async (
  origin: string,
  destination: string,
  cacheKey: string
): Promise<{ distance: number; duration: number } | null> => {
  try {
    const response = await fetch('/api/google-distance', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        origins: [origin],
        destinations: [destination],
      }),
    });

    if (!response.ok) {
      console.warn(`‚ö†Ô∏è Distance Matrix API falhou: ${response.status}`);
      return null;
    }

    const data = await response.json();
    
    if (data.error) {
      console.warn('‚ö†Ô∏è Distance Matrix API retornou erro:', data.error);
      return null;
    }

    if (data.rows && data.rows[0] && data.rows[0].elements && data.rows[0].elements[0]) {
      const element = data.rows[0].elements[0];
      
      if (element.status === 'OK' && element.distance && element.duration) {
        const result = {
          distance: element.distance.value / 1000, // Converter de metros para km
          duration: Math.round(element.duration.value / 60) // Converter de segundos para minutos
        };
        
        // Armazenar no cache
        distanceMatrixCache.set(cacheKey, result);
        console.log(`üó∫Ô∏è Distance Matrix: ${result.distance.toFixed(1)}km, ${result.duration}min`);
        
        return result;
      }
    }

    return null;
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro na Distance Matrix API:', error);
    return null;
  }
};

// Locais conhecidos com coordenadas
const knownLocations: { [key: string]: { lat: number; lng: number } } = {
  'aeroporto guarulhos': { lat: -23.4356, lng: -46.4731 },
  'aeroporto congonhas': { lat: -23.6267, lng: -46.6554 },
  'avenida paulista': { lat: -23.5614, lng: -46.6562 },
  'centro s√£o paulo': { lat: -23.5505, lng: -46.6333 },
  'rodovi√°ria tiet√™': { lat: -23.5151, lng: -46.6256 },
  'shopping eldorado': { lat: -23.5672, lng: -46.6731 },
  'shopping ibirapuera': { lat: -23.6167, lng: -46.6642 }
};

// Fun√ß√£o para obter coordenadas de um endere√ßo
export const getCoordinatesFromAddress = async (address: string): Promise<{ lat: number; lng: number } | null> => {
  try {
    const normalizedAddress = address.toLowerCase().trim();
    
    // Verificar cache de endere√ßos selecionados primeiro
    if (selectedAddressCoordinatesCache.has(normalizedAddress)) {
      const cached = selectedAddressCoordinatesCache.get(normalizedAddress)!;
      console.log(`üéØ Cache hit para coordenadas de "${address}":`, cached);
      return cached;
    }
    
    // Verificar locais conhecidos
    for (const [key, coords] of Object.entries(knownLocations)) {
      if (normalizedAddress.includes(key)) {
        console.log(`üìç Local conhecido encontrado: "${key}"`);
        return coords;
      }
    }
    
    // Usar servi√ßo de geocodifica√ß√£o
    console.log(`üîç Buscando coordenadas para: "${address}"`);
    const coords = await getCoords(address);
    
    if (coords) {
      console.log(`‚úÖ Coordenadas encontradas para "${address}":`, coords);
      return coords;
    }
    
    console.warn(`‚ö†Ô∏è N√£o foi poss√≠vel obter coordenadas para: "${address}"`);
    return null;
  } catch (error) {
    console.error(`‚ùå Erro ao obter coordenadas para "${address}":`, error);
    return null;
  }
};

// Fun√ß√£o para calcular dist√¢ncia entre dois endere√ßos
export const calculateDistanceBetweenAddresses = async (origin: string, destination: string): Promise<number> => {
  try {
    console.log(`üó∫Ô∏è Calculando dist√¢ncia entre "${origin}" e "${destination}"`);
    
    // Primeiro, tentar usar Google Maps Distance Matrix API para obter dist√¢ncia real da rota
    const googleMapsData = await getGoogleMapsDistanceAndTime(origin, destination);
    
    if (googleMapsData) {
      console.log(`‚úÖ Usando dist√¢ncia real do Google Maps: ${googleMapsData.distance.toFixed(1)} KM`);
      return Math.round(googleMapsData.distance * 10) / 10;
    }
    
    // Fallback: usar coordenadas e c√°lculo de dist√¢ncia em linha reta
    console.log(`‚ö†Ô∏è Fallback: calculando dist√¢ncia usando coordenadas`);
    
    const originCoords = await getCoordinatesFromAddress(origin);
    const destCoords = await getCoordinatesFromAddress(destination);
    
    if (originCoords && destCoords) {
      const distance = calculateDistance(
        originCoords.lat, originCoords.lng,
        destCoords.lat, destCoords.lng
      );
      
      // Aplicar fator de corre√ß√£o para dist√¢ncia rodovi√°ria (aproximadamente 1.3x a dist√¢ncia em linha reta)
      const roadDistance = Math.round(distance * 1.3 * 10) / 10;
      console.log(`üìè Dist√¢ncia calculada: ${roadDistance} KM (linha reta: ${distance.toFixed(1)} KM)`);
      
      return roadDistance;
    }
    
    // Se n√£o conseguir obter coordenadas, usar estimativa baseada em CEPs ou nomes
    console.warn(`‚ö†Ô∏è N√£o foi poss√≠vel obter coordenadas, usando estimativa padr√£o`);
    return 15; // Dist√¢ncia padr√£o em km
  } catch (error) {
    console.error('‚ùå Erro ao calcular dist√¢ncia:', error);
    return 15; // Dist√¢ncia padr√£o em caso de erro
  }
};

// Fun√ß√£o para estimar tempo de viagem (considerando tr√¢nsito urbano)
export const estimateTravelTime = (distance: number): number => {
  console.log(`‚è∞ [DEBUG] estimateTravelTime recebeu: ${distance} (tipo: ${typeof distance})`);
  
  // Validar entrada
  if (isNaN(distance) || distance <= 0) {
    console.warn(`‚ö†Ô∏è [DEBUG] Dist√¢ncia inv√°lida para estimativa de tempo: ${distance}, usando 15 min padr√£o`);
    return 15;
  }
  
  // Velocidade m√©dia em S√£o Paulo considerando tr√¢nsito
  let avgSpeed: number;
  
  if (distance <= 5) {
    avgSpeed = 20; // 20 km/h para dist√¢ncias curtas (muito tr√¢nsito)
  } else if (distance <= 15) {
    avgSpeed = 25; // 25 km/h para dist√¢ncias m√©dias
  } else if (distance <= 30) {
    avgSpeed = 35; // 35 km/h para dist√¢ncias longas (mais rodovias)
  } else {
    avgSpeed = 45; // 45 km/h para dist√¢ncias muito longas
  }
  
  const timeInHours = distance / avgSpeed;
  const timeInMinutes = Math.round(timeInHours * 60);
  const finalTime = Math.max(timeInMinutes, 15); // M√≠nimo de 15 minutos
  
  console.log(`‚è∞ [DEBUG] C√°lculo do tempo estimado:`, {
    distance,
    avgSpeed,
    timeInHours,
    timeInMinutes,
    finalTime
  });
  
  return finalTime;
};

// Fun√ß√£o para detectar tipo de local (aeroporto, rodovi√°ria, etc.)
export const detectLocationType = (address: string): string => {
  const normalizedAddress = address.toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '');
  
  if (normalizedAddress.includes('aeroporto') || normalizedAddress.includes('airport') || 
      normalizedAddress.includes('gru') || normalizedAddress.includes('cgh')) {
    return 'airport';
  }
  
  if (normalizedAddress.includes('rodovi√°ria') || normalizedAddress.includes('rodoviaria') || 
      normalizedAddress.includes('terminal') || normalizedAddress.includes('bus')) {
    return 'bus_station';
  }
  
  if (normalizedAddress.includes('shopping') || normalizedAddress.includes('mall')) {
    return 'shopping';
  }
  
  if (normalizedAddress.includes('hospital') || normalizedAddress.includes('pronto socorro')) {
    return 'hospital';
  }
  
  if (normalizedAddress.includes('hotel') || normalizedAddress.includes('pousada')) {
    return 'hotel';
  }
  
  if (normalizedAddress.includes('universidade') || normalizedAddress.includes('faculdade') || 
      normalizedAddress.includes('usp') || normalizedAddress.includes('puc')) {
    return 'university';
  }
  
  return 'regular';
};

// Fun√ß√£o para calcular taxa adicional baseada no tipo de local
export const calculateLocationSurcharge = (locationType: string): number => {
  switch (locationType) {
    case 'airport':
      return 1.3; // 30% adicional para aeroportos
    case 'bus_station':
      return 1.15; // 15% adicional para rodovi√°rias
    case 'shopping':
      return 1.05; // 5% adicional para shoppings (dificuldade de acesso)
    case 'hospital':
      return 1.1; // 10% adicional para hospitais (urg√™ncia)
    default:
      return 1.0; // Sem taxa adicional
  }
};

// Fun√ß√£o para detectar se um CEP ou endere√ßo est√° fora do estado de S√£o Paulo
export const isOutsideSaoPauloState = (address: string): boolean => {
  const addressLower = address.toLowerCase().trim();
  
  // Extrair CEP do endere√ßo
  const cepMatch = address.match(/\b(\d{5})-?(\d{3})\b/);
  
  if (cepMatch) {
    const cep = cepMatch[1] + cepMatch[2];
    const cepNumber = parseInt(cep);
    
    // Faixas de CEP do estado de S√£o Paulo
    // S√£o Paulo: 01000-000 a 19999-999
    if (cepNumber >= 1000000 && cepNumber <= 19999999) {
      console.log(`‚úÖ CEP ${cep} est√° dentro do estado de S√£o Paulo`);
      return false;
    } else {
      console.log(`‚ùå CEP ${cep} est√° fora do estado de S√£o Paulo`);
      return true;
    }
  }
  
  // Se n√£o tem CEP, verificar por nomes de estados/cidades conhecidas fora de SP
  const outsideStates = [
    // Rio de Janeiro
    'rio de janeiro', 'rj', 'niter√≥i', 'niteroi', 'petr√≥polis', 'petropolis', 
    'nova igua√ßu', 'nova iguacu', 'duque de caxias', 's√£o gon√ßalo', 'sao goncalo',
    'volta redonda', 'campos dos goytacazes', 'belford roxo', 's√£o jo√£o de meriti', 
    'sao joao de meriti', 'nova friburgo', 'maca√©', 'macae', 'cabo frio',
    'angra dos reis', 'resende', 'barra mansa', 'teres√≥polis', 'teresopolis',
    'mag√©', 'mage', 'itabora√≠', 'itaborai', 'maric√°', 'marica', 'araruama',
    'saquarema', 'silva jardim', 'casimiro de abreu', 'rio das ostras',
    'b√∫zios', 'buzios', 'arraial do cabo', 'iguaba grande', 's√£o pedro da aldeia',
    'sao pedro da aldeia', 'cabo frio', 'arma√ß√£o dos b√∫zios', 'armacao dos buzios',
    
    // Bras√≠lia/DF
    'bras√≠lia', 'brasilia', 'distrito federal', 'df', 'taguatinga', 'ceil√¢ndia',
    'ceilandia', 'samambaia', 'planaltina', '√°guas claras', 'aguas claras',
    'guar√°', 'guara', 'sobradinho', 'gama', 'santa maria', 's√£o sebasti√£o',
    'sao sebastiao', 'parano√°', 'paranoa', 'riacho fundo', 'n√∫cleo bandeirante',
    'nucleo bandeirante', 'cruzeiro', 'lago sul', 'lago norte', 'sudoeste',
    'octogonal', 'candangol√¢ndia', 'candangolandia', 'estrutural', 'itapo√£',
    'itapoa', 'jardim bot√¢nico', 'jardim botanico', 'park way', 'scia',
    'vicente pires', 'fercal', 'varj√£o', 'varjao',
    
    // Minas Gerais
    'belo horizonte', 'mg', 'minas gerais', 'contagem', 'uberl√¢ndia', 'uberlandia',
    'juiz de fora', 'betim', 'montes claros', 'ribeir√£o das neves', 'ribeirao das neves',
    'uberaba', 'governador valadares', 'ipatinga', 'sete lagoas', 'divin√≥polis',
    'divinopolis', 'santa luzia', 'ibirit√©', 'ibirite', 'po√ßos de caldas',
    'pocos de caldas', 'patos de minas', 'te√≥filo otoni', 'teofilo otoni',
    'barbacena', 'sabar√°', 'sabara', 'vespasiano', 'araguari', 'conselheiro lafaiete',
    'itabira', 'passos', 'coronel fabriciano', 'muria√©', 'muriae', 'ituiutaba',
    'lavras', 'nova lima', 'par√° de minas', 'para de minas', 'paracatu',
    'pouso alegre', 'tim√≥teo', 'timoteo', 'una√≠', 'unai', 'varginha',
    'arax√°', 'araxa', 'formiga', 'itajub√°', 'itajuba', 'jo√£o monlevade',
    'joao monlevade', 'manhua√ßu', 'manhuacu', 'nova serrana', 'ouro preto',
    'pedro leopoldo', 's√£o jo√£o del rei', 'sao joao del rei', 'tr√™s cora√ß√µes',
    'tres coracoes', 'vi√ßosa', 'vicosa',
    
    // Outros estados importantes
    'curitiba', 'paran√°', 'parana', 'pr', 'londrina', 'maring√°', 'maringa',
    'ponta grossa', 'cascavel', 's√£o jos√© dos pinhais', 'sao jose dos pinhais',
    'foz do igua√ßu', 'foz do iguacu', 'colombo', 'guarapuava', 'paranagu√°',
    'paranagua', 'arauc√°ria', 'araucaria', 'toledo', 'apucarana', 'pinhais',
    'campo largo', 'arapongas', 'almirante tamandar√©', 'almirante tamandare',
    'umuarama', 'paranava√≠', 'paranavai', 'camb√©', 'cambe', 'francisco beltr√£o',
    'francisco beltrao', 'fazenda rio grande', 'sarandi', 'fazenda rio grande',
    's√£o jos√© da lapa', 'sao jose da lapa', 'tel√™maco borba', 'telemaco borba',
    
    // Esp√≠rito Santo
    'vit√≥ria', 'vitoria', 'es', 'esp√≠rito santo', 'espirito santo', 'vila velha',
    'cariacica', 'serra', 'cachoeiro de itapemirim', 'linhares', 's√£o mateus',
    'sao mateus', 'colatina', 'guarapari', 'nova ven√©cia', 'nova venecia',
    'aracruz', 'viana', 'marata√≠zes', 'marataizes', 'santa teresa', 'itapemirim',
    'castelo', 'domingos martins', 'alegre', 'baixo guandu', 'barra de s√£o francisco',
    'barra de sao francisco', 'concei√ß√£o da barra', 'conceicao da barra',
    'fund√£o', 'fundao', 'i√∫na', 'iuna', 'jaguar√©', 'jaguare', 'mimoso do sul',
    'muqui', 'pi√∫ma', 'piuma', 'presidente kennedy', 'rio novo do sul',
    'santa leopoldina', 'santa maria de jetib√°', 'santa maria de jetiba',
    's√£o gabriel da palha', 'sao gabriel da palha', 's√£o roque do cana√£',
    'sao roque do canaa', 'vargem alta', 'vila pav√£o', 'vila pavao',
    'vila val√©rio', 'vila valerio',
    
    // Bahia
    'salvador', 'ba', 'bahia', 'feira de santana', 'vit√≥ria da conquista',
    'vitoria da conquista', 'cama√ßari', 'camacari', 'juazeiro', 'ilh√©us',
    'ilheus', 'itabuna', 'lauro de freitas', 'jequi√©', 'jequie', 'alagoinhas',
    'barreiras', 'porto seguro', 'sim√µes filho', 'simoes filho', 'paulo afonso',
    'eun√°polis', 'eunapolis', 'santo ant√¥nio de jesus', 'santo antonio de jesus',
    'valen√ßa', 'valenca', 'candeias', 'guanambi', 'jacobina', 'serrinha',
    'senhor do bonfim', 'dias d\'√°vila', 'dias d\'avila', 'bom jesus da lapa',
    'cruz das almas', 'santo amaro', 'concei√ß√£o do coit√©', 'conceicao do coite',
    'livramento de nossa senhora', 'ribeira do pombal', 'tucano', 'euclides da cunha',
    'casa nova', 'barra', 'xique-xique', 'remanso', 'campo formoso', 'juazeiro',
    'petrolina', 'sobradinho', 'casa nova', 'sento s√©', 'sento se', 'pil√£o arcado',
    'pilao arcado', 'campo alegre de lourdes', 'cura√ß√°', 'curaca', 'uau√°', 'uaua',
    'canudos', 'monte santo', 'euclides da cunha', 'paripiranga', 'ribeira do amparo',
    'c√≠cero dantas', 'cicero dantas', 'banza√™', 'banzae', 'f√°tima', 'fatima',
    'heli√≥polis', 'heliopolis', 'nova soure', 'olindina', 'ouri√ßangas', 'ouricangas',
    'quijingue', 'retirolandia', 'santaluz', 's√£o domingos', 'sao domingos',
    'teofil√¢ndia', 'teofilandia', 'tucano', 'valente', 'biritinga', 'barrocas',
    'boa vista do tupim', 'central', 'cansan√ß√£o', 'cansancao', 'ichu', 'iti√∫ba',
    'itiuba', 'lamar√£o', 'lamarao', 'monte santo', 'nordestina', 'queimadas',
    'quijingue', 'retirol√¢ndia', 'retirolandia', 'santaluz', 's√£o domingos',
    'sao domingos', 'serrinha', 'teofil√¢ndia', 'teofilandia', 'tucano', 'valente',
    
    // Goi√°s
    'goi√¢nia', 'goiania', 'go', 'goi√°s', 'goias', 'aparecida de goi√¢nia',
    'aparecida de goiania', 'an√°polis', 'anapolis', 'rio verde', 'luzi√¢nia',
    'luziania', '√°guas lindas de goi√°s', 'aguas lindas de goias', 'valpara√≠so de goi√°s',
    'valparaiso de goias', 'trindade', 'formosa', 'novo gama', 'itumbiara',
    'senador canedo', 'catal√£o', 'catalao', 'jata√≠', 'jatai', 'planaltina',
    'caldas novas', 'santo ant√¥nio do descoberto', 'santo antonio do descoberto',
    'cidade ocidental', 'mineiros', 'cristalina', 'inhumas', 'goian√©sia',
    'goianesia', 'quirin√≥polis', 'quirinopolis', 'ceres', 'porangatu', 'morrinhos'
  ];
  
  // Verificar se cont√©m algum estado/cidade fora de SP
  const isOutside = outsideStates.some(location => addressLower.includes(location));
  
  if (isOutside) {
    console.log(`‚ùå Endere√ßo "${address}" detectado como fora do estado de S√£o Paulo`);
    return true;
  }
  
  console.log(`‚úÖ Endere√ßo "${address}" n√£o foi detectado como fora do estado de S√£o Paulo`);
  return false;
};

// Fun√ß√£o principal para calcular pre√ßo da viagem
export const calculateTripPrice = async (
  origin: string,
  destination: string,
  vehicleType: 'economico' | 'executivo' | 'luxo' | 'suv' | 'minivanBlindada' | 'van15Lugares' = 'executivo'
): Promise<{
  distance: number;
  estimatedTime: number;
  basePrice: number;
  finalPrice: number;
}> => {
  try {
    console.log(`üí∞ Calculando pre√ßo da viagem [${vehicleType}]: "${origin}" ‚Üí "${destination}"`);
    
    // Mapear tipos de ve√≠culo para as categorias do sistema de tarifas fixas
    const vehicleTypeMapping: { [key: string]: keyof typeof DAILY_RATES } = {
      'economico': 'executivoComum',
      'executivo': 'executivoSedan',
      'luxo': 'executivoPremiumBlindado',
      'suv': 'minivanComum',
      'minivanBlindada': 'minivanBlindada',
      'van15Lugares': 'van15Lugares'
    };
    
    const fixedPriceVehicleType = vehicleTypeMapping[vehicleType] || 'executivoSedan';
    
    // Verificar se √© uma solicita√ß√£o de di√°ria
    if (isDailyRequest(origin) || isDailyRequest(destination)) {
      const dailyPrice = DAILY_RATES[fixedPriceVehicleType];
      console.log(`üìÖ Solicita√ß√£o de di√°ria detectada: R$ ${dailyPrice.toFixed(2)}`);
      
      return {
        distance: 100, // 100km inclusos na di√°ria
        estimatedTime: 600, // 10 horas
        basePrice: dailyPrice,
        finalPrice: dailyPrice
      };
    }
    
    // Verificar se os endere√ßos cont√™m CEPs (com fallback nos dados locais) e tentar usar sistema de precifica√ß√£o por CEP
    const originCep = extractCepWithFallback(origin);
    const destinationCep = extractCepWithFallback(destination);
    
    // NOVO: Verificar sistema de pre√ßos regionais primeiro
    const regionalPrice = getRegionalPrice(originCep || '', destinationCep || '', origin, destination);
    
    if (regionalPrice) {
      const vehicleTypeMapping: { [key: string]: keyof RegionalPrices } = {
        'economico': 'executivoComum',
        'executivo': 'executivoSedan',
        'luxo': 'executivoPremiumBlindado',
        'suv': 'minivanComum',
        'minivanBlindada': 'minivanBlindada',
        'van15Lugares': 'van15Lugares'
      };
      
      const regionalVehicleType = vehicleTypeMapping[vehicleType] || 'executivoSedan';
      const price = regionalPrice[regionalVehicleType];
      
      console.log(`üèôÔ∏è Usando pre√ßo regional: R$ ${price.toFixed(2)} [${vehicleType}]`);
      
      // Obter dados de dist√¢ncia e tempo para informa√ß√£o
      let distance: number = 15;
      let estimatedTime: number = 45;
      
      try {
        const googleMapsData = await getGoogleMapsDistanceAndTime(origin, destination);
        if (googleMapsData) {
          distance = googleMapsData.distance;
          estimatedTime = googleMapsData.duration;
        } else {
          distance = await calculateDistanceBetweenAddresses(origin, destination);
          estimatedTime = estimateTravelTime(distance);
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao obter dados de dist√¢ncia/tempo para pre√ßo regional, usando valores padr√£o');
      }
      
      return {
        distance: Math.round(distance * 10) / 10,
        estimatedTime: Math.round(estimatedTime),
        basePrice: price,
        finalPrice: price
      };
    }
    
    if (originCep && destinationCep) {
      // Usar sistema de precifica√ß√£o por CEP
      const cepPrice = findPriceByCep(originCep, destinationCep, fixedPriceVehicleType);
      
      if (cepPrice !== null) {
        console.log(`üí∞ Usando pre√ßo por CEP: R$ ${cepPrice.toFixed(2)}`);
        
        // Obter dados de dist√¢ncia e tempo para informa√ß√£o
        let distance: number = 15;
        let estimatedTime: number = 45;
        
        try {
          const googleMapsData = await getGoogleMapsDistanceAndTime(origin, destination);
          if (googleMapsData) {
            distance = googleMapsData.distance;
            estimatedTime = googleMapsData.duration;
          } else {
            distance = await calculateDistanceBetweenAddresses(origin, destination);
            estimatedTime = estimateTravelTime(distance);
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Erro ao obter dados de dist√¢ncia/tempo, usando valores padr√£o');
        }
        
        return {
          distance: Math.round(distance * 10) / 10,
          estimatedTime: Math.round(estimatedTime),
          basePrice: cepPrice,
          finalPrice: cepPrice
        };
      }
    }
    
    // Tentar usar sistema de tarifas fixas
    const fixedPrice = findFixedPrice(origin, destination, fixedPriceVehicleType);
    
    if (fixedPrice) {
      console.log(`üí∞ Usando tarifa fixa: R$ ${fixedPrice.toFixed(2)}`);
      
      // Obter dados de dist√¢ncia e tempo para informa√ß√£o
      let distance: number = 15;
      let estimatedTime: number = 45;
      
      try {
        const googleMapsData = await getGoogleMapsDistanceAndTime(origin, destination);
        if (googleMapsData) {
          distance = googleMapsData.distance;
          estimatedTime = googleMapsData.duration;
        } else {
          distance = await calculateDistanceBetweenAddresses(origin, destination);
          estimatedTime = estimateTravelTime(distance);
        }
      } catch (error) {
        console.warn('‚ö†Ô∏è Erro ao obter dados de dist√¢ncia/tempo, usando valores padr√£o');
      }
      
      const originLocation = identifyLocation(origin);
      const destinationLocation = identifyLocation(destination);
      const originName = originLocation ? KNOWN_LOCATIONS[originLocation]?.name : origin;
      const destinationName = destinationLocation ? KNOWN_LOCATIONS[destinationLocation]?.name : destination;
      
      return {
        distance: Math.round(distance * 10) / 10,
        estimatedTime: Math.round(estimatedTime),
        basePrice: fixedPrice,
        finalPrice: fixedPrice
      };
    }
    
    // Se n√£o h√° tarifa fixa, usar c√°lculo din√¢mico original
    console.log(`‚ö†Ô∏è Tarifa fixa n√£o encontrada, usando c√°lculo din√¢mico`);
    
    // Primeiro, tentar obter dados reais do Google Maps
    const googleMapsData = await getGoogleMapsDistanceAndTime(origin, destination);
    console.log(`üó∫Ô∏è [DEBUG] Google Maps retornou:`, googleMapsData);
    
    let distance: number;
    let estimatedTime: number;
    
    if (googleMapsData) {
      // Usar dados reais do Google Maps
      distance = googleMapsData.distance;
      estimatedTime = googleMapsData.duration;
      console.log(`‚úÖ Usando dados reais do Google Maps: ${distance.toFixed(1)}km, ${estimatedTime}min`);
    } else {
      // Fallback: calcular usando fun√ß√£o existente
      console.log(`‚ö†Ô∏è Fallback: usando c√°lculo estimado`);
      distance = await calculateDistanceBetweenAddresses(origin, destination);
      estimatedTime = estimateTravelTime(distance);
      console.log(`‚ö†Ô∏è Fallback resultou em: ${distance.toFixed(1)}km, ${estimatedTime}min`);
    }
    
    console.log(`üìä Resultados finais do c√°lculo:`, { 
      distance: distance.toFixed(1), 
      estimatedTime,
      distanceType: typeof distance,
      estimatedTimeType: typeof estimatedTime
    });
    
    // Validar dados antes de continuar
    if (isNaN(distance) || distance <= 0) {
      console.warn('‚ö†Ô∏è Dist√¢ncia inv√°lida, usando padr√£o');
      distance = 15;
    }
    
    if (isNaN(estimatedTime) || estimatedTime <= 0) {
      console.warn('‚ö†Ô∏è Tempo estimado inv√°lido, calculando baseado na dist√¢ncia');
      estimatedTime = estimateTravelTime(distance);
    }
    
    console.log(`üìä Dados validados:`, { distance, estimatedTime });
    
    // Pre√ßo base por km baseado no tipo de ve√≠culo
    const basePricePerKm = {
      economico: 3.0,
      executivo: 3.5,
      luxo: 5.5,
      suv: 4.2,
      minivanBlindada: 6.5,
      van15Lugares: 5.0
    };
    
    let basePrice = distance * basePricePerKm[vehicleType];
    let finalPrice = basePrice;
    
    // Detectar tipos de local e aplicar taxas
    const originType = detectLocationType(origin);
    const destType = detectLocationType(destination);
    
    const originSurcharge = calculateLocationSurcharge(originType);
    const destSurcharge = calculateLocationSurcharge(destType);
    
    // Aplicar a maior taxa entre origem e destino
    const maxSurcharge = Math.max(originSurcharge, destSurcharge);
    if (maxSurcharge > 1.0) {
      finalPrice *= maxSurcharge;
    }
    
    // Taxa para viagens longas (>25km)
    if (distance > 25) {
      finalPrice *= 1.3;
    }
    
    // Pre√ßo m√≠nimo
    const minimumPrice = vehicleType === 'luxo' ? 120 : 
                        vehicleType === 'suv' ? 100 : 
                        vehicleType === 'minivanBlindada' ? 150 :
                        vehicleType === 'van15Lugares' ? 120 : 80;
    if (finalPrice < minimumPrice) {
      finalPrice = minimumPrice;
    }
    
    const result = {
      distance: Math.round(distance * 10) / 10,
      estimatedTime: Math.round(estimatedTime),
      basePrice: Math.round(basePrice * 100) / 100,
      finalPrice: Math.round(finalPrice * 100) / 100
    };
    
    console.log(`üí∞ [DEBUG] Resultado final da viagem:`, result);
    
    return result;
  } catch (error) {
    console.error('Erro ao calcular pre√ßo da viagem:', error);
    
    // Retornar valores padr√£o em caso de erro
    const fallbackResult = {
      distance: 15,
      estimatedTime: 45,
      basePrice: 52.5,
      finalPrice: 80
    };
    
    console.log(`üí∞ [DEBUG] Resultado fallback:`, fallbackResult);
    return fallbackResult;
  }
};

// Fun√ß√£o para encontrar CEP nos dados locais
export const findCepInLocalData = (addressText: string): string | null => {
  const normalizedAddress = addressText.toLowerCase().trim();
  
  // Procurar nos endere√ßos de S√£o Paulo
  for (const [key, data] of Object.entries(saoPauloAddresses)) {
    const normalizedKey = key.toLowerCase();
    
    // Verificar se o endere√ßo cont√©m o nome do local
    if (normalizedAddress.includes(normalizedKey)) {
      console.log(`üéØ CEP encontrado nos dados locais: ${key} ‚Üí ${data.cep}`);
      return data.cep;
    }
    
    // Verificar varia√ß√µes do nome
    if (data.variations) {
      for (const variation of data.variations) {
        const normalizedVariation = variation.toLowerCase();
        if (normalizedAddress.includes(normalizedVariation)) {
          console.log(`üéØ CEP encontrado por varia√ß√£o: ${variation} ‚Üí ${data.cep}`);
          return data.cep;
        }
      }
    }
  }
  
  return null;
};

// Fun√ß√£o para extrair CEP de um endere√ßo
export const extractCepFromAddress = (address: string): string | null => {
  // Padr√µes de CEP: 12345-678 ou 12345678
  const cepPatterns = [
    /\b(\d{5})-(\d{3})\b/,  // 12345-678
    /\b(\d{8})\b/           // 12345678
  ];
  
  for (const pattern of cepPatterns) {
    const match = address.match(pattern);
    if (match) {
      let cep: string;
      if (match[2]) {
        // Formato 12345-678
        cep = match[1] + match[2];
      } else {
        // Formato 12345678
        cep = match[1];
      }
      
      // Validar se √© um CEP v√°lido (8 d√≠gitos)
      if (cep.length === 8 && /^\d{8}$/.test(cep)) {
        console.log(`üìÆ CEP extra√≠do: ${cep}`);
        return cep;
      }
    }
  }
  
  return null;
};

// Fun√ß√£o para extrair CEP com fallback nos dados locais
export const extractCepWithFallback = (address: string): string | null => {
  // Primeiro, tentar extrair CEP diretamente do endere√ßo
  const directCep = extractCepFromAddress(address);
  if (directCep) {
    return directCep;
  }
  
  // Se n√£o encontrou CEP, procurar nos dados locais
  const localCep = findCepInLocalData(address);
  if (localCep) {
    return localCep;
  }
  
  console.log(`‚ö†Ô∏è Nenhum CEP encontrado para: "${address}"`);
  return null;
};

// Fun√ß√£o para verificar se um endere√ßo tem CEP v√°lido
export const hasValidCep = (address: string): boolean => {
  return extractCepFromAddress(address) !== null;
};

// Fun√ß√£o para calcular pre√ßo usando sistema de CEPs
export const calculatePriceWithCepSystem = async (
  origin: string,
  destination: string,
  vehicleType: 'economico' | 'executivo' | 'luxo' | 'suv' | 'minivanBlindada' | 'van15Lugares' = 'executivo'
): Promise<{ price: number; usedCepSystem: boolean } | null> => {
  const originCep = extractCepWithFallback(origin);
  const destinationCep = extractCepWithFallback(destination);
  
  if (!originCep || !destinationCep) {
    return null;
  }
  
  // Mapear tipos de ve√≠culo para as categorias do sistema de CEPs
  const vehicleTypeMapping: { [key: string]: keyof typeof DAILY_RATES } = {
    'economico': 'executivoComum',
    'executivo': 'executivoSedan',
    'luxo': 'executivoPremiumBlindado',
    'suv': 'minivanComum',
    'minivanBlindada': 'minivanBlindada',
    'van15Lugares': 'van15Lugares'
  };
  
  const cepVehicleType = vehicleTypeMapping[vehicleType] || 'executivoSedan';
  const price = findPriceByCep(originCep, destinationCep, cepVehicleType);
  
  if (price !== null) {
    return { price, usedCepSystem: true };
  }
  
  return null;
};