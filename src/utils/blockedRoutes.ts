// FunÃ§Ã£o para detectar rotas bloqueadas de/para SÃ£o Paulo sentido Viracopos, Sorocaba, Campinas

/**
 * Verifica se uma rota deve ser bloqueada baseada nas regras:
 * - Rotas saindo de SP para Viracopos, Sorocaba, Campinas
 * - Rotas voltando de Viracopos, Sorocaba, Campinas para SP
 */
export const isBlockedRoute = (origin: string, destination: string): boolean => {
  const originLower = origin.toLowerCase().trim();
  const destinationLower = destination.toLowerCase().trim();

  // FunÃ§Ã£o para detectar se Ã© SÃ£o Paulo (capital ou regiÃ£o metropolitana)
  const isSaoPauloRegion = (address: string): boolean => {
    const spKeywords = [
      'sÃ£o paulo', 'sao paulo', 'sp',
      'centro', 'repÃºblica', 'sÃ©', 'liberdade', 'bela vista',
      'consolaÃ§Ã£o', 'higienÃ³polis', 'santa cecÃ­lia', 'campos elÃ­seos',
      'bom retiro', 'luz', 'brÃ¡s', 'pari', 'canindÃ©',
      'vila guilherme', 'santana', 'tucuruvi', 'jaÃ§anÃ£',
      'zona norte', 'zona sul', 'zona leste', 'zona oeste',
      'paulista', 'avenida paulista', 'itaim', 'itaim bibi',
      'vila olÃ­mpia', 'vila olimpia', 'pinheiros', 'lapa',
      'perdizes', 'pompeia', 'barra funda', 'agua branca',
      'vila leopoldina', 'jaguare', 'rio pequeno', 'raposo tavares',
      'butanta', 'butantÃ£', 'morumbi', 'vila sonia', 'jardim paulista',
      'vila mariana', 'saude', 'saÃºde', 'cursino', 'ipiranga',
      'sacoma', 'jabaquara', 'cidade ademar', 'pedreira',
      'cidade dutra', 'socorro', 'cidade tiradentes', 'grajaÃº',
      'parelheiros', 'mooca', 'tatuape', 'tatuapÃ©', 'penha',
      'vila formosa', 'vila matilde', 'vila prudente', 'sapopemba',
      'vila carrÃ£o', 'aricanduva', 'itaquera', 'guaianases',
      'lajeado', 'itaim paulista', 'jardins', 'cerqueira cesar',
      'cerqueira cÃ©sar', 'paraÃ­so', 'paraiso', 'aclimaÃ§Ã£o',
      'cambuci', 'vila madalena', 'sumarÃ©', 'sumare'
    ];

    // Verificar CEPs de SÃ£o Paulo
    const spCepPatterns = [
      /\b0[1-5]\d{3}-?\d{3}\b/, // 01000-000 a 05999-999
      /\b08[0-4]\d{2}-?\d{3}\b/  // 08000-000 a 08499-999
    ];

    // Verificar se contÃ©m palavras-chave de SP
    const hasSpKeyword = spKeywords.some(keyword => address.includes(keyword));
    
    // Verificar se contÃ©m CEP de SP
    const hasSpCep = spCepPatterns.some(pattern => pattern.test(address));

    return hasSpKeyword || hasSpCep;
  };

  // FunÃ§Ã£o para detectar Viracopos/Campinas
  const isViracoposCampinas = (address: string): boolean => {
    const viracoposKeywords = [
      'viracopos', 'vcp', 'aeroporto viracopos',
      'campinas', 'santos dumont', 'rod. santos dumont'
    ];

    // CEP do aeroporto de Viracopos
    const viracoposCepPattern = /\b13052-?\d{3}\b/;

    const hasViracoposKeyword = viracoposKeywords.some(keyword => address.includes(keyword));
    const hasViracoposCep = viracoposCepPattern.test(address);

    return hasViracoposKeyword || hasViracoposCep;
  };

  // FunÃ§Ã£o para detectar Sorocaba
  const isSorocaba = (address: string): boolean => {
    const sorocabaKeywords = [
      'sorocaba', 'sorocaba sp'
    ];

    // CEPs de Sorocaba (18000-000 a 18999-999)
    const sorocabaCepPattern = /\b18\d{3}-?\d{3}\b/;

    const hasSorocabaKeyword = sorocabaKeywords.some(keyword => address.includes(keyword));
    const hasSorocabaCep = sorocabaCepPattern.test(address);

    return hasSorocabaKeyword || hasSorocabaCep;
  };

  // Verificar rotas bloqueadas:
  // 1. SP â†’ Viracopos/Campinas
  if (isSaoPauloRegion(originLower) && isViracoposCampinas(destinationLower)) {
    return true;
  }

  // 2. SP â†’ Sorocaba
  if (isSaoPauloRegion(originLower) && isSorocaba(destinationLower)) {
    return true;
  }

  // 3. Viracopos/Campinas â†’ SP
  if (isViracoposCampinas(originLower) && isSaoPauloRegion(destinationLower)) {
    return true;
  }

  // 4. Sorocaba â†’ SP
  if (isSorocaba(originLower) && isSaoPauloRegion(destinationLower)) {
    return true;
  }

  return false;
};

/**
 * Retorna a mensagem de consultor para rotas bloqueadas
 */
export const getBlockedRouteMessage = (): string => {
  return 'Esta rota requer negociaÃ§Ã£o especial. Entre em contato com nosso consultor para obter um orÃ§amento personalizado.';
};

/**
 * FunÃ§Ã£o para debug - mostra quais critÃ©rios foram atendidos
 */
export const debugBlockedRoute = (origin: string, destination: string): void => {
  console.log('ðŸš« Verificando rota bloqueada:', { origin, destination });
  console.log('ðŸš« Resultado:', isBlockedRoute(origin, destination));
};