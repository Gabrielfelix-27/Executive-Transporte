// Arquivo de teste para valida√ß√£o das regras de CEP de Viracopos
// Este arquivo pode ser usado para testar as fun√ß√µes de valida√ß√£o

import {
  isValidViracoposOriginCep,
  isValidGrandeSaoPauloDestinationCep,
  extractCepFromAddress,
  isValidViracoposRoute,
  getViracoposPriceByVehicleType
} from './cepValidation';

// Fun√ß√£o para executar todos os testes
export const runCepValidationTests = () => {
  console.log('üß™ Iniciando testes de valida√ß√£o de CEP para Viracopos');
  
  // Teste 1: Valida√ß√£o de CEPs de origem Viracopos
  console.log('\nüìç Teste 1: CEPs de origem Viracopos');
  const viracoposCeps = ['13052-900', '13052900', '13052-970', '13052970', '13052-999', '12345-678'];
  viracoposCeps.forEach(cep => {
    const isValid = isValidViracoposOriginCep(cep);
    console.log(`CEP ${cep}: ${isValid ? '‚úÖ V√°lido' : '‚ùå Inv√°lido'}`);
  });
  
  // Teste 2: Valida√ß√£o de CEPs de destino Grande S√£o Paulo
  console.log('\nüèôÔ∏è Teste 2: CEPs de destino Grande S√£o Paulo');
  const saoPauloCeps = ['06000-000', '06000000', '09999-999', '09999999', '08500-000', '05999-999', '10000-000'];
  saoPauloCeps.forEach(cep => {
    const isValid = isValidGrandeSaoPauloDestinationCep(cep);
    console.log(`CEP ${cep}: ${isValid ? '‚úÖ V√°lido' : '‚ùå Inv√°lido'}`);
  });
  
  // Teste 3: Extra√ß√£o de CEP de endere√ßos
  console.log('\nüîç Teste 3: Extra√ß√£o de CEP de endere√ßos');
  const addresses = [
    'Rod. Santos Dumont, km 66, 13052-900 - Campinas - SP',
    'Rua das Flores, 123, S√£o Paulo - SP, 08500-000',
    'Avenida Paulista, 1000 - S√£o Paulo',
    'Endere√ßo sem CEP'
  ];
  addresses.forEach(address => {
    const cep = extractCepFromAddress(address);
    console.log(`"${address}" ‚Üí CEP: ${cep || 'N√£o encontrado'}`);
  });
  
  // Teste 4: Valida√ß√£o de rotas completas
  console.log('\nüõ£Ô∏è Teste 4: Valida√ß√£o de rotas Viracopos ‚Üí Grande S√£o Paulo');
  const routes = [
    {
      origin: 'Rod. Santos Dumont, km 66, 13052-900 - Campinas - SP',
      destination: 'Rua Augusta, 123, 08500-000 - S√£o Paulo - SP'
    },
    {
      origin: 'Aeroporto de Viracopos, Campinas',
      destination: 'Avenida Paulista, S√£o Paulo'
    },
    {
      origin: 'Rod. Santos Dumont, km 66, 13052-970 - Campinas - SP',
      destination: 'Vila Madalena, 06000-000 - S√£o Paulo - SP'
    },
    {
      origin: 'Aeroporto de Congonhas, S√£o Paulo',
      destination: 'Avenida Paulista, S√£o Paulo'
    }
  ];
  
  routes.forEach((route, index) => {
    const isValid = isValidViracoposRoute(route.origin, route.destination);
    console.log(`Rota ${index + 1}: ${isValid ? '‚úÖ V√°lida' : '‚ùå Inv√°lida'}`);
    console.log(`  Origem: ${route.origin}`);
    console.log(`  Destino: ${route.destination}`);
  });
  
  // Teste 5: Pre√ßos por categoria de ve√≠culo
  console.log('\nüí∞ Teste 5: Pre√ßos por categoria de ve√≠culo');
  const vehicleTypes = ['economico', 'executivo', 'luxo', 'suv', 'minivanBlindada', 'van15Lugares', 'invalidType'];
  vehicleTypes.forEach(vehicleType => {
    const price = getViracoposPriceByVehicleType(vehicleType);
    console.log(`${vehicleType}: ${price ? `R$ ${price.toFixed(2)}` : 'Pre√ßo n√£o encontrado'}`);
  });
  
  console.log('\nüéâ Testes de valida√ß√£o de CEP conclu√≠dos!');
};

// Executar testes automaticamente quando o arquivo for importado em desenvolvimento
if (process.env.NODE_ENV === 'development') {
  // runCepValidationTests();
}